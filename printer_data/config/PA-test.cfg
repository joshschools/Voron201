[pa_test]
size_x: 100
#    X dimension tower size  (mm)
size_y: 50
#    Y dimension tower size  (mm)
height: 50
#   Height of tower (mm)
origin_x: 150
#   Center of the bed in x
origin_y: 150
#   Center of the bed in y
layer_height: 0.2
first_layer_height: 0.3
perimeters: 2
#   Number of perimeters to be printed for the tower
brim_width: 10
#   Width of brim (mm)
slow_velocity: 20
#   Start velocity for PA test segment (mm/s)
medium_velocity: 50
#   Medium velocity for PA test segment (mm/s)
fast_velocity: 80
#   End velocity for PA test segment (mm/s)
filament_diameter: 1.75

[delayed_gcode start_pa_test]
gcode:
    {% set vars = printer["gcode_macro RUN_PA_TEST"] %}
    {% set extruder_temp = params.EXTRUDER|default(250)|int %}
    {% set bed_temp = params.BED|default(105)|int %}
    {% set chamber_temp = params.CHAMBER|default(0)|int %}
    SET_FAN_SPEED FAN=Nevermore SPEED=1
    
    
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0

    M140 S{bed_temp}
    M109 S150               ; Wait for extruder to reach set temp
    M190 S{bed_temp}        ; Wait for bed to reach set temp
    STATUS_HEATING

    # If you have a chamber heater:
    # M141 S{chamber_temp}
#    G4 P60000       ; optional, let temps settle for 1 min
    G28 XY
    G28 Z METHOD=PROXIMITY CALIBRATE=1    ; calibrate z offset and beacon model hot
    G32                                 ; or QGL to balance towers
    BED_MESH_CALIBRATE RUNS=2           ; bed mesh in scan mode

    G28 Z METHOD=PROXIMITY CALIBRATE=0    ; calibrate z offset only after tilt/mesh
    
    STATUS_HEATING
    M104 S{extruder_temp}   ; Wait for extruder to reach set temp
    M109 S{extruder_temp}   ; Wait for extruder to reach set temp

    SET_GCODE_OFFSET Z=0.06     ; add a little offset for hotend thermal expansion
                                ; needs fine tuning, long meltzones require more
    # Add your start GCode here, for example:
    # G28

    {% set flow_percent = vars.flow_rate|float * 100.0 %}
    {% if flow_percent > 0 %}
        M221 S{flow_percent}
    {% endif %}
    {% set height = printer.configfile.settings.pa_test.height %}  
    {% set pavalue = vars.pa_value %}
    ; If pa_value is 0 then we test the full pa range starting from 0
    {% if  vars.pa_value == 0 %} 
        TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005
    {% else %}
        ; make sure that delta and start can not be lower then 0
        {% if vars.pa_value - vars.pa_range <= 0%} 
            {% set delta = vars.pa_range %}
            {% set start = 0 %}
        {% else %}
            ; calculate the pa range that we want to test
            {% set delta = (vars.pa_value + vars.pa_range)  - (vars.pa_value - vars.pa_range)  %} 
            ; calculate the pa start value
            {% set start = vars.pa_value - vars.pa_range %} 
        {% endif %}
        TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START={start} FACTOR={delta / height}
    {% endif %}
    ; PRINT_PA_TOWER must be the last command in the start_pa_test script:
    ; it starts a print and then immediately returns without waiting for the print to finish
    PRINT_PA_TOWER {vars.rawparams} FINAL_GCODE_ID=end_pa_test

[delayed_gcode end_pa_test]
gcode:
    PRINT_END
    # Add your end GCode here, for example:
    # M104 S0 ; turn off temperature
    # M140 S0 ; turn off heatbed
    # M107 ; turn off fan
    # G91 ; relative positioning
    # G1 Z5 ; raise Z
    # G90 ; absolute positioning
    # G1 X0 Y200 ; present print
    # M84 ; disable steppers
    RESTORE_GCODE_STATE NAME=PA_TEST_STATE

[gcode_macro RUN_PA_TEST]
variable_bed_temp: -1
variable_hotend_temp: -1
variable_pa_value: 0             # Used for further tuning of pa value. If value is not 0 than the tested pa value will only be +/- (determined by the pa_range variable) around of the pa_value variable
variable_pa_range: 0.03          # Only use if pa_value is set to heigher than 0. Used to set the +/- area around pa_value that should be tested
variable_flow_rate: -1
variable_rawparams: ''
gcode:
    # Fail early if the required parameters are not provided
    {% if params.NOZZLE is not defined %}
    {action_raise_error('NOZZLE= parameter must be provided')}
    {% endif %}
    {% if params.TARGET_TEMP is not defined %}
    {action_raise_error('TARGET_TEMP= parameter must be provided')}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=RUN_PA_TEST VARIABLE=bed_temp VALUE={params.BED_TEMP|default(60)}
    SET_GCODE_VARIABLE MACRO=RUN_PA_TEST VARIABLE=hotend_temp VALUE={params.TARGET_TEMP}
    SET_GCODE_VARIABLE MACRO=RUN_PA_TEST VARIABLE=pa_value VALUE={params.PA_VALUE|default(0)}
    SET_GCODE_VARIABLE MACRO=RUN_PA_TEST VARIABLE=pa_range VALUE={params.PA_RANGE|default(0.01)}
    SET_GCODE_VARIABLE MACRO=RUN_PA_TEST VARIABLE=flow_rate VALUE={params.FLOW_RATE|default(-1)}
    SET_GCODE_VARIABLE MACRO=RUN_PA_TEST VARIABLE=rawparams VALUE="'{rawparams}'"
    SAVE_GCODE_STATE NAME=PA_TEST_STATE
    UPDATE_DELAYED_GCODE ID=start_pa_test DURATION=0.01